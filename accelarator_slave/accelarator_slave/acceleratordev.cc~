/*
 * A demo/debug device.
 *
 * Copyright (c) 2013 Xilinx Inc.
 * Written by Edgar E. Iglesias
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

//#define SC_INCLUDE_DYNAMIC_PROCESSES


#include <inttypes.h>

#include "tlm_utils/simple_initiator_socket.h"
#include "tlm_utils/simple_target_socket.h"

using namespace sc_core;
using namespace std;

#include "acceleratordev.h"
#include <sys/types.h>
#include <time.h>
#include <systemc>

acceleratordev::acceleratordev(sc_module_name name)
	: sc_module(name)
{
	SC_HAS_PROCESS(acceleratordev);
	SC_THREAD(do_block);

}


void acceleratordev::do_block (void)
{
	for(;;)
	{
		wait(start_doblock->value_changed_event());
//read data and pointer from defined scratch pad
		int lda = *((int*)0x40000004);
		int ldb = *((int*)0x40000008);
		int ldc = *((int*)0x4000000c);
		int M = *((int*)0x400000010);
		int N = *((int*)0x40000014);
		int K = *((int*)0x40000018);
		int* A = (int*)(0x40000018);
		int* B = (int*)(0x40000018);
		int* C = (int*)(0x40000018);
		register int i,j,k;
		for (i = 0; i < M; ++i) {
        for (k = 0; k < K; ++k) {
    		  register int A_PART = A[i*lda + k];
            for (j = 0; j < N; ++j) {
								C[i*ldc + j] += A_PART * B[k*ldb + j];
						}
				}
		}
	}
	doblock_done->write(1);
}

